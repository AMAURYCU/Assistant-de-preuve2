State 0:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On error shift to state 1
-- On SIGMA shift to state 2
-- On program shift to state 42
-- On declaration_sigma shift to state 43
## Reductions:

State 1:
## Known stack suffix:
## error
## LR(1) items:
program -> error . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production program -> error

State 2:
## Known stack suffix:
## SIGMA
## LR(1) items:
declaration_sigma -> SIGMA . BEGIN END [ HYP GOAL DEF ]
declaration_sigma -> SIGMA . BEGIN in_sigma END [ HYP GOAL DEF ]
## Transitions:
-- On BEGIN shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## SIGMA BEGIN
## LR(1) items:
declaration_sigma -> SIGMA BEGIN . END [ HYP GOAL DEF ]
declaration_sigma -> SIGMA BEGIN . in_sigma END [ HYP GOAL DEF ]
## Transitions:
-- On SORT shift to state 4
-- On RELAT shift to state 7
-- On FUN shift to state 19
-- On END shift to state 26
-- On CONST shift to state 27
-- On sort_sigma shift to state 32
-- On relat_sigma shift to state 33
-- On in_sigma shift to state 40
-- On fun_sigma_pv shift to state 35
-- On const_sigma_pv shift to state 37
## Reductions:
-- On END
--   reduce production in_sigma ->
** Conflict on END

State 4:
## Known stack suffix:
## SORT
## LR(1) items:
sort_sigma -> SORT . IDENT SEMI [ SORT RELAT FUN END CONST ]
## Transitions:
-- On IDENT shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## SORT IDENT
## LR(1) items:
sort_sigma -> SORT IDENT . SEMI [ SORT RELAT FUN END CONST ]
## Transitions:
-- On SEMI shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## SORT IDENT SEMI
## LR(1) items:
sort_sigma -> SORT IDENT SEMI . [ SORT RELAT FUN END CONST ]
## Transitions:
## Reductions:
-- On SORT RELAT FUN END CONST
--   reduce production sort_sigma -> SORT IDENT SEMI

State 7:
## Known stack suffix:
## RELAT
## LR(1) items:
relat_sigma -> RELAT . IDENT COLON loption(separated_nonempty_list(MUL,sort)) SEMI [ SORT RELAT FUN END CONST ]
## Transitions:
-- On IDENT shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## RELAT IDENT
## LR(1) items:
relat_sigma -> RELAT IDENT . COLON loption(separated_nonempty_list(MUL,sort)) SEMI [ SORT RELAT FUN END CONST ]
## Transitions:
-- On COLON shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## RELAT IDENT COLON
## LR(1) items:
relat_sigma -> RELAT IDENT COLON . loption(separated_nonempty_list(MUL,sort)) SEMI [ SORT RELAT FUN END CONST ]
## Transitions:
-- On REAL shift to state 10
-- On INT shift to state 11
-- On IDENT shift to state 12
-- On sort shift to state 13
-- On separated_nonempty_list(MUL,sort) shift to state 16
-- On loption(separated_nonempty_list(MUL,sort)) shift to state 17
## Reductions:
-- On SEMI
--   reduce production loption(separated_nonempty_list(MUL,sort)) ->

State 10:
## Known stack suffix:
## REAL
## LR(1) items:
sort -> REAL . [ SEMI RPAR MUL COMMA ARROW ]
## Transitions:
## Reductions:
-- On SEMI RPAR MUL COMMA ARROW
--   reduce production sort -> REAL

State 11:
## Known stack suffix:
## INT
## LR(1) items:
sort -> INT . [ SEMI RPAR MUL COMMA ARROW ]
## Transitions:
## Reductions:
-- On SEMI RPAR MUL COMMA ARROW
--   reduce production sort -> INT

State 12:
## Known stack suffix:
## IDENT
## LR(1) items:
sort -> IDENT . [ SEMI RPAR MUL COMMA ARROW ]
## Transitions:
## Reductions:
-- On SEMI RPAR MUL COMMA ARROW
--   reduce production sort -> IDENT

State 13:
## Known stack suffix:
## sort
## LR(1) items:
separated_nonempty_list(MUL,sort) -> sort . [ SEMI ARROW ]
separated_nonempty_list(MUL,sort) -> sort . MUL separated_nonempty_list(MUL,sort) [ SEMI ARROW ]
## Transitions:
-- On MUL shift to state 14
## Reductions:
-- On SEMI ARROW
--   reduce production separated_nonempty_list(MUL,sort) -> sort

State 14:
## Known stack suffix:
## sort MUL
## LR(1) items:
separated_nonempty_list(MUL,sort) -> sort MUL . separated_nonempty_list(MUL,sort) [ SEMI ARROW ]
## Transitions:
-- On REAL shift to state 10
-- On INT shift to state 11
-- On IDENT shift to state 12
-- On sort shift to state 13
-- On separated_nonempty_list(MUL,sort) shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## sort MUL separated_nonempty_list(MUL,sort)
## LR(1) items:
separated_nonempty_list(MUL,sort) -> sort MUL separated_nonempty_list(MUL,sort) . [ SEMI ARROW ]
## Transitions:
## Reductions:
-- On SEMI ARROW
--   reduce production separated_nonempty_list(MUL,sort) -> sort MUL separated_nonempty_list(MUL,sort)

State 16:
## Known stack suffix:
## separated_nonempty_list(MUL,sort)
## LR(1) items:
loption(separated_nonempty_list(MUL,sort)) -> separated_nonempty_list(MUL,sort) . [ SEMI ARROW ]
## Transitions:
## Reductions:
-- On SEMI ARROW
--   reduce production loption(separated_nonempty_list(MUL,sort)) -> separated_nonempty_list(MUL,sort)

State 17:
## Known stack suffix:
## RELAT IDENT COLON loption(separated_nonempty_list(MUL,sort))
## LR(1) items:
relat_sigma -> RELAT IDENT COLON loption(separated_nonempty_list(MUL,sort)) . SEMI [ SORT RELAT FUN END CONST ]
## Transitions:
-- On SEMI shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## RELAT IDENT COLON loption(separated_nonempty_list(MUL,sort)) SEMI
## LR(1) items:
relat_sigma -> RELAT IDENT COLON loption(separated_nonempty_list(MUL,sort)) SEMI . [ SORT RELAT FUN END CONST ]
## Transitions:
## Reductions:
-- On SORT RELAT FUN END CONST
--   reduce production relat_sigma -> RELAT IDENT COLON loption(separated_nonempty_list(MUL,sort)) SEMI

State 19:
## Known stack suffix:
## FUN
## LR(1) items:
fun_sigma_pv -> FUN . IDENT COLON loption(separated_nonempty_list(MUL,sort)) ARROW sort SEMI [ SORT RELAT FUN END CONST ]
## Transitions:
-- On IDENT shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## FUN IDENT
## LR(1) items:
fun_sigma_pv -> FUN IDENT . COLON loption(separated_nonempty_list(MUL,sort)) ARROW sort SEMI [ SORT RELAT FUN END CONST ]
## Transitions:
-- On COLON shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## FUN IDENT COLON
## LR(1) items:
fun_sigma_pv -> FUN IDENT COLON . loption(separated_nonempty_list(MUL,sort)) ARROW sort SEMI [ SORT RELAT FUN END CONST ]
## Transitions:
-- On REAL shift to state 10
-- On INT shift to state 11
-- On IDENT shift to state 12
-- On sort shift to state 13
-- On separated_nonempty_list(MUL,sort) shift to state 16
-- On loption(separated_nonempty_list(MUL,sort)) shift to state 22
## Reductions:
-- On ARROW
--   reduce production loption(separated_nonempty_list(MUL,sort)) ->

State 22:
## Known stack suffix:
## FUN IDENT COLON loption(separated_nonempty_list(MUL,sort))
## LR(1) items:
fun_sigma_pv -> FUN IDENT COLON loption(separated_nonempty_list(MUL,sort)) . ARROW sort SEMI [ SORT RELAT FUN END CONST ]
## Transitions:
-- On ARROW shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## FUN IDENT COLON loption(separated_nonempty_list(MUL,sort)) ARROW
## LR(1) items:
fun_sigma_pv -> FUN IDENT COLON loption(separated_nonempty_list(MUL,sort)) ARROW . sort SEMI [ SORT RELAT FUN END CONST ]
## Transitions:
-- On REAL shift to state 10
-- On INT shift to state 11
-- On IDENT shift to state 12
-- On sort shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## FUN IDENT COLON loption(separated_nonempty_list(MUL,sort)) ARROW sort
## LR(1) items:
fun_sigma_pv -> FUN IDENT COLON loption(separated_nonempty_list(MUL,sort)) ARROW sort . SEMI [ SORT RELAT FUN END CONST ]
## Transitions:
-- On SEMI shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## FUN IDENT COLON loption(separated_nonempty_list(MUL,sort)) ARROW sort SEMI
## LR(1) items:
fun_sigma_pv -> FUN IDENT COLON loption(separated_nonempty_list(MUL,sort)) ARROW sort SEMI . [ SORT RELAT FUN END CONST ]
## Transitions:
## Reductions:
-- On SORT RELAT FUN END CONST
--   reduce production fun_sigma_pv -> FUN IDENT COLON loption(separated_nonempty_list(MUL,sort)) ARROW sort SEMI

State 26:
## Known stack suffix:
## SIGMA BEGIN END
## LR(1) items:
declaration_sigma -> SIGMA BEGIN END . [ HYP GOAL DEF ]
## Transitions:
## Reductions:
-- On HYP GOAL DEF
--   reduce production declaration_sigma -> SIGMA BEGIN END

State 27:
## Known stack suffix:
## CONST
## LR(1) items:
const_sigma_pv -> CONST . IDENT COLON sort SEMI [ SORT RELAT FUN END CONST ]
## Transitions:
-- On IDENT shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## CONST IDENT
## LR(1) items:
const_sigma_pv -> CONST IDENT . COLON sort SEMI [ SORT RELAT FUN END CONST ]
## Transitions:
-- On COLON shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## CONST IDENT COLON
## LR(1) items:
const_sigma_pv -> CONST IDENT COLON . sort SEMI [ SORT RELAT FUN END CONST ]
## Transitions:
-- On REAL shift to state 10
-- On INT shift to state 11
-- On IDENT shift to state 12
-- On sort shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## CONST IDENT COLON sort
## LR(1) items:
const_sigma_pv -> CONST IDENT COLON sort . SEMI [ SORT RELAT FUN END CONST ]
## Transitions:
-- On SEMI shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## CONST IDENT COLON sort SEMI
## LR(1) items:
const_sigma_pv -> CONST IDENT COLON sort SEMI . [ SORT RELAT FUN END CONST ]
## Transitions:
## Reductions:
-- On SORT RELAT FUN END CONST
--   reduce production const_sigma_pv -> CONST IDENT COLON sort SEMI

State 32:
## Known stack suffix:
## sort_sigma
## LR(1) items:
in_sigma -> sort_sigma . in_sigma [ END ]
## Transitions:
-- On SORT shift to state 4
-- On RELAT shift to state 7
-- On FUN shift to state 19
-- On CONST shift to state 27
-- On sort_sigma shift to state 32
-- On relat_sigma shift to state 33
-- On in_sigma shift to state 39
-- On fun_sigma_pv shift to state 35
-- On const_sigma_pv shift to state 37
## Reductions:
-- On END
--   reduce production in_sigma ->

State 33:
## Known stack suffix:
## relat_sigma
## LR(1) items:
in_sigma -> relat_sigma . in_sigma [ END ]
## Transitions:
-- On SORT shift to state 4
-- On RELAT shift to state 7
-- On FUN shift to state 19
-- On CONST shift to state 27
-- On sort_sigma shift to state 32
-- On relat_sigma shift to state 33
-- On in_sigma shift to state 34
-- On fun_sigma_pv shift to state 35
-- On const_sigma_pv shift to state 37
## Reductions:
-- On END
--   reduce production in_sigma ->

State 34:
## Known stack suffix:
## relat_sigma in_sigma
## LR(1) items:
in_sigma -> relat_sigma in_sigma . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production in_sigma -> relat_sigma in_sigma

State 35:
## Known stack suffix:
## fun_sigma_pv
## LR(1) items:
in_sigma -> fun_sigma_pv . in_sigma [ END ]
## Transitions:
-- On SORT shift to state 4
-- On RELAT shift to state 7
-- On FUN shift to state 19
-- On CONST shift to state 27
-- On sort_sigma shift to state 32
-- On relat_sigma shift to state 33
-- On in_sigma shift to state 36
-- On fun_sigma_pv shift to state 35
-- On const_sigma_pv shift to state 37
## Reductions:
-- On END
--   reduce production in_sigma ->

State 36:
## Known stack suffix:
## fun_sigma_pv in_sigma
## LR(1) items:
in_sigma -> fun_sigma_pv in_sigma . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production in_sigma -> fun_sigma_pv in_sigma

State 37:
## Known stack suffix:
## const_sigma_pv
## LR(1) items:
in_sigma -> const_sigma_pv . in_sigma [ END ]
## Transitions:
-- On SORT shift to state 4
-- On RELAT shift to state 7
-- On FUN shift to state 19
-- On CONST shift to state 27
-- On sort_sigma shift to state 32
-- On relat_sigma shift to state 33
-- On in_sigma shift to state 38
-- On fun_sigma_pv shift to state 35
-- On const_sigma_pv shift to state 37
## Reductions:
-- On END
--   reduce production in_sigma ->

State 38:
## Known stack suffix:
## const_sigma_pv in_sigma
## LR(1) items:
in_sigma -> const_sigma_pv in_sigma . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production in_sigma -> const_sigma_pv in_sigma

State 39:
## Known stack suffix:
## sort_sigma in_sigma
## LR(1) items:
in_sigma -> sort_sigma in_sigma . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production in_sigma -> sort_sigma in_sigma

State 40:
## Known stack suffix:
## SIGMA BEGIN in_sigma
## LR(1) items:
declaration_sigma -> SIGMA BEGIN in_sigma . END [ HYP GOAL DEF ]
## Transitions:
-- On END shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## SIGMA BEGIN in_sigma END
## LR(1) items:
declaration_sigma -> SIGMA BEGIN in_sigma END . [ HYP GOAL DEF ]
## Transitions:
## Reductions:
-- On HYP GOAL DEF
--   reduce production declaration_sigma -> SIGMA BEGIN in_sigma END

State 42:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept program

State 43:
## Known stack suffix:
## declaration_sigma
## LR(1) items:
program -> declaration_sigma . list(define_form) list(hypotheses) goal EOF [ # ]
## Transitions:
-- On DEF shift to state 44
-- On list(define_form) shift to state 120
-- On define_form shift to state 134
## Reductions:
-- On HYP GOAL
--   reduce production list(define_form) ->

State 44:
## Known stack suffix:
## DEF
## LR(1) items:
define_form -> DEF . IDENT LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR COLON PROP DPEC formule [ HYP GOAL DEF ]
## Transitions:
-- On IDENT shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## DEF IDENT
## LR(1) items:
define_form -> DEF IDENT . LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR COLON PROP DPEC formule [ HYP GOAL DEF ]
## Transitions:
-- On LPAR shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## DEF IDENT LPAR
## LR(1) items:
define_form -> DEF IDENT LPAR . loption(separated_nonempty_list(COMMA,declaration_param)) RPAR COLON PROP DPEC formule [ HYP GOAL DEF ]
## Transitions:
-- On IDENT shift to state 47
-- On separated_nonempty_list(COMMA,declaration_param) shift to state 50
-- On loption(separated_nonempty_list(COMMA,declaration_param)) shift to state 51
-- On declaration_param shift to state 96
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,declaration_param)) ->

State 47:
## Known stack suffix:
## IDENT
## LR(1) items:
declaration_param -> IDENT . COLON sort [ RPAR COMMA ]
## Transitions:
-- On COLON shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## IDENT COLON
## LR(1) items:
declaration_param -> IDENT COLON . sort [ RPAR COMMA ]
## Transitions:
-- On REAL shift to state 10
-- On INT shift to state 11
-- On IDENT shift to state 12
-- On sort shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## IDENT COLON sort
## LR(1) items:
declaration_param -> IDENT COLON sort . [ RPAR COMMA ]
## Transitions:
## Reductions:
-- On RPAR COMMA
--   reduce production declaration_param -> IDENT COLON sort

State 50:
## Known stack suffix:
## separated_nonempty_list(COMMA,declaration_param)
## LR(1) items:
loption(separated_nonempty_list(COMMA,declaration_param)) -> separated_nonempty_list(COMMA,declaration_param) . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,declaration_param)) -> separated_nonempty_list(COMMA,declaration_param)

State 51:
## Known stack suffix:
## DEF IDENT LPAR loption(separated_nonempty_list(COMMA,declaration_param))
## LR(1) items:
define_form -> DEF IDENT LPAR loption(separated_nonempty_list(COMMA,declaration_param)) . RPAR COLON PROP DPEC formule [ HYP GOAL DEF ]
## Transitions:
-- On RPAR shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## DEF IDENT LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR
## LR(1) items:
define_form -> DEF IDENT LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR . COLON PROP DPEC formule [ HYP GOAL DEF ]
## Transitions:
-- On COLON shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## DEF IDENT LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR COLON
## LR(1) items:
define_form -> DEF IDENT LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR COLON . PROP DPEC formule [ HYP GOAL DEF ]
## Transitions:
-- On PROP shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## DEF IDENT LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR COLON PROP
## LR(1) items:
define_form -> DEF IDENT LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR COLON PROP . DPEC formule [ HYP GOAL DEF ]
## Transitions:
-- On DPEC shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## DEF IDENT LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR COLON PROP DPEC
## LR(1) items:
define_form -> DEF IDENT LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR COLON PROP DPEC . formule [ HYP GOAL DEF ]
## Transitions:
-- On TOP shift to state 56
-- On NOT shift to state 57
-- On LPAR shift to state 59
-- On INTC shift to state 60
-- On IDENT shift to state 61
-- On FC shift to state 65
-- On EXISTS shift to state 74
-- On BOTTOM shift to state 79
-- On ALL shift to state 80
-- On term shift to state 85
-- On formule shift to state 119
-- On atom shift to state 93
## Reductions:

State 56:
## Known stack suffix:
## TOP
## LR(1) items:
atom -> TOP . [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
## Reductions:
-- On RPAR OR IMP HYP GOAL EOF DEF AND
--   reduce production atom -> TOP

State 57:
## Known stack suffix:
## NOT
## LR(1) items:
formule -> NOT . formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> NOT . LPAR formule RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On TOP shift to state 56
-- On NOT shift to state 57
-- On LPAR shift to state 58
-- On INTC shift to state 60
-- On IDENT shift to state 61
-- On FC shift to state 65
-- On EXISTS shift to state 74
-- On BOTTOM shift to state 79
-- On ALL shift to state 80
-- On term shift to state 85
-- On formule shift to state 118
-- On atom shift to state 93
## Reductions:

State 58:
## Known stack suffix:
## NOT LPAR
## LR(1) items:
formule -> LPAR . formule RPAR OR LPAR formule RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> LPAR . formule RPAR AND LPAR formule RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> LPAR . formule RPAR IMP LPAR formule RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> NOT LPAR . formule RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> LPAR . atom RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On TOP shift to state 56
-- On NOT shift to state 57
-- On LPAR shift to state 59
-- On INTC shift to state 60
-- On IDENT shift to state 61
-- On FC shift to state 65
-- On EXISTS shift to state 74
-- On BOTTOM shift to state 79
-- On ALL shift to state 80
-- On term shift to state 85
-- On formule shift to state 116
-- On atom shift to state 114
## Reductions:

State 59:
## Known stack suffix:
## LPAR
## LR(1) items:
formule -> LPAR . formule RPAR OR LPAR formule RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> LPAR . formule RPAR AND LPAR formule RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> LPAR . formule RPAR IMP LPAR formule RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> LPAR . atom RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On TOP shift to state 56
-- On NOT shift to state 57
-- On LPAR shift to state 59
-- On INTC shift to state 60
-- On IDENT shift to state 61
-- On FC shift to state 65
-- On EXISTS shift to state 74
-- On BOTTOM shift to state 79
-- On ALL shift to state 80
-- On term shift to state 85
-- On formule shift to state 100
-- On atom shift to state 114
## Reductions:

State 60:
## Known stack suffix:
## INTC
## LR(1) items:
term -> INTC . [ RPAR OR IMP HYP GOAL EQ EOF DEF COMMA AND ]
## Transitions:
## Reductions:
-- On RPAR OR IMP HYP GOAL EQ EOF DEF COMMA AND
--   reduce production term -> INTC

State 61:
## Known stack suffix:
## IDENT
## LR(1) items:
atom -> IDENT . LPAR loption(separated_nonempty_list(COMMA,term)) RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
term -> IDENT . [ EQ ]
term -> IDENT . LPAR loption(separated_nonempty_list(COMMA,term)) RPAR [ EQ ]
## Transitions:
-- On LPAR shift to state 62
## Reductions:
-- On EQ
--   reduce production term -> IDENT

State 62:
## Known stack suffix:
## IDENT LPAR
## LR(1) items:
atom -> IDENT LPAR . loption(separated_nonempty_list(COMMA,term)) RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
term -> IDENT LPAR . loption(separated_nonempty_list(COMMA,term)) RPAR [ EQ ]
## Transitions:
-- On INTC shift to state 60
-- On IDENT shift to state 63
-- On FC shift to state 65
-- On term shift to state 66
-- On separated_nonempty_list(COMMA,term) shift to state 69
-- On loption(separated_nonempty_list(COMMA,term)) shift to state 72
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,term)) ->

State 63:
## Known stack suffix:
## IDENT
## LR(1) items:
term -> IDENT . [ RPAR OR IMP HYP GOAL EOF DEF COMMA AND ]
term -> IDENT . LPAR loption(separated_nonempty_list(COMMA,term)) RPAR [ RPAR OR IMP HYP GOAL EOF DEF COMMA AND ]
## Transitions:
-- On LPAR shift to state 64
## Reductions:
-- On RPAR OR IMP HYP GOAL EOF DEF COMMA AND
--   reduce production term -> IDENT

State 64:
## Known stack suffix:
## IDENT LPAR
## LR(1) items:
term -> IDENT LPAR . loption(separated_nonempty_list(COMMA,term)) RPAR [ RPAR OR IMP HYP GOAL EOF DEF COMMA AND ]
## Transitions:
-- On INTC shift to state 60
-- On IDENT shift to state 63
-- On FC shift to state 65
-- On term shift to state 66
-- On separated_nonempty_list(COMMA,term) shift to state 69
-- On loption(separated_nonempty_list(COMMA,term)) shift to state 70
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,term)) ->

State 65:
## Known stack suffix:
## FC
## LR(1) items:
term -> FC . [ RPAR OR IMP HYP GOAL EQ EOF DEF COMMA AND ]
## Transitions:
## Reductions:
-- On RPAR OR IMP HYP GOAL EQ EOF DEF COMMA AND
--   reduce production term -> FC

State 66:
## Known stack suffix:
## term
## LR(1) items:
separated_nonempty_list(COMMA,term) -> term . [ RPAR ]
separated_nonempty_list(COMMA,term) -> term . COMMA separated_nonempty_list(COMMA,term) [ RPAR ]
## Transitions:
-- On COMMA shift to state 67
## Reductions:
-- On RPAR
--   reduce production separated_nonempty_list(COMMA,term) -> term

State 67:
## Known stack suffix:
## term COMMA
## LR(1) items:
separated_nonempty_list(COMMA,term) -> term COMMA . separated_nonempty_list(COMMA,term) [ RPAR ]
## Transitions:
-- On INTC shift to state 60
-- On IDENT shift to state 63
-- On FC shift to state 65
-- On term shift to state 66
-- On separated_nonempty_list(COMMA,term) shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## term COMMA separated_nonempty_list(COMMA,term)
## LR(1) items:
separated_nonempty_list(COMMA,term) -> term COMMA separated_nonempty_list(COMMA,term) . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production separated_nonempty_list(COMMA,term) -> term COMMA separated_nonempty_list(COMMA,term)

State 69:
## Known stack suffix:
## separated_nonempty_list(COMMA,term)
## LR(1) items:
loption(separated_nonempty_list(COMMA,term)) -> separated_nonempty_list(COMMA,term) . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,term)) -> separated_nonempty_list(COMMA,term)

State 70:
## Known stack suffix:
## IDENT LPAR loption(separated_nonempty_list(COMMA,term))
## LR(1) items:
term -> IDENT LPAR loption(separated_nonempty_list(COMMA,term)) . RPAR [ RPAR OR IMP HYP GOAL EOF DEF COMMA AND ]
## Transitions:
-- On RPAR shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## IDENT LPAR loption(separated_nonempty_list(COMMA,term)) RPAR
## LR(1) items:
term -> IDENT LPAR loption(separated_nonempty_list(COMMA,term)) RPAR . [ RPAR OR IMP HYP GOAL EOF DEF COMMA AND ]
## Transitions:
## Reductions:
-- On RPAR OR IMP HYP GOAL EOF DEF COMMA AND
--   reduce production term -> IDENT LPAR loption(separated_nonempty_list(COMMA,term)) RPAR

State 72:
## Known stack suffix:
## IDENT LPAR loption(separated_nonempty_list(COMMA,term))
## LR(1) items:
atom -> IDENT LPAR loption(separated_nonempty_list(COMMA,term)) . RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
term -> IDENT LPAR loption(separated_nonempty_list(COMMA,term)) . RPAR [ EQ ]
## Transitions:
-- On RPAR shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## IDENT LPAR loption(separated_nonempty_list(COMMA,term)) RPAR
## LR(1) items:
atom -> IDENT LPAR loption(separated_nonempty_list(COMMA,term)) RPAR . [ RPAR OR IMP HYP GOAL EOF DEF AND ]
term -> IDENT LPAR loption(separated_nonempty_list(COMMA,term)) RPAR . [ EQ ]
## Transitions:
## Reductions:
-- On RPAR OR IMP HYP GOAL EOF DEF AND
--   reduce production atom -> IDENT LPAR loption(separated_nonempty_list(COMMA,term)) RPAR
-- On EQ
--   reduce production term -> IDENT LPAR loption(separated_nonempty_list(COMMA,term)) RPAR

State 74:
## Known stack suffix:
## EXISTS
## LR(1) items:
formule -> EXISTS . LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR COMMA formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On LPAR shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## EXISTS LPAR
## LR(1) items:
formule -> EXISTS LPAR . loption(separated_nonempty_list(COMMA,declaration_param)) RPAR COMMA formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On IDENT shift to state 47
-- On separated_nonempty_list(COMMA,declaration_param) shift to state 50
-- On loption(separated_nonempty_list(COMMA,declaration_param)) shift to state 76
-- On declaration_param shift to state 96
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,declaration_param)) ->

State 76:
## Known stack suffix:
## EXISTS LPAR loption(separated_nonempty_list(COMMA,declaration_param))
## LR(1) items:
formule -> EXISTS LPAR loption(separated_nonempty_list(COMMA,declaration_param)) . RPAR COMMA formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On RPAR shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## EXISTS LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR
## LR(1) items:
formule -> EXISTS LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR . COMMA formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On COMMA shift to state 78
## Reductions:

State 78:
## Known stack suffix:
## EXISTS LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR COMMA
## LR(1) items:
formule -> EXISTS LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR COMMA . formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On TOP shift to state 56
-- On NOT shift to state 57
-- On LPAR shift to state 59
-- On INTC shift to state 60
-- On IDENT shift to state 61
-- On FC shift to state 65
-- On EXISTS shift to state 74
-- On BOTTOM shift to state 79
-- On ALL shift to state 80
-- On term shift to state 85
-- On formule shift to state 99
-- On atom shift to state 93
## Reductions:

State 79:
## Known stack suffix:
## BOTTOM
## LR(1) items:
atom -> BOTTOM . [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
## Reductions:
-- On RPAR OR IMP HYP GOAL EOF DEF AND
--   reduce production atom -> BOTTOM

State 80:
## Known stack suffix:
## ALL
## LR(1) items:
formule -> ALL . LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR COMMA formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On LPAR shift to state 81
## Reductions:

State 81:
## Known stack suffix:
## ALL LPAR
## LR(1) items:
formule -> ALL LPAR . loption(separated_nonempty_list(COMMA,declaration_param)) RPAR COMMA formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On IDENT shift to state 47
-- On separated_nonempty_list(COMMA,declaration_param) shift to state 50
-- On loption(separated_nonempty_list(COMMA,declaration_param)) shift to state 82
-- On declaration_param shift to state 96
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,declaration_param)) ->

State 82:
## Known stack suffix:
## ALL LPAR loption(separated_nonempty_list(COMMA,declaration_param))
## LR(1) items:
formule -> ALL LPAR loption(separated_nonempty_list(COMMA,declaration_param)) . RPAR COMMA formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On RPAR shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## ALL LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR
## LR(1) items:
formule -> ALL LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR . COMMA formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On COMMA shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## ALL LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR COMMA
## LR(1) items:
formule -> ALL LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR COMMA . formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On TOP shift to state 56
-- On NOT shift to state 57
-- On LPAR shift to state 59
-- On INTC shift to state 60
-- On IDENT shift to state 61
-- On FC shift to state 65
-- On EXISTS shift to state 74
-- On BOTTOM shift to state 79
-- On ALL shift to state 80
-- On term shift to state 85
-- On formule shift to state 88
-- On atom shift to state 93
## Reductions:

State 85:
## Known stack suffix:
## term
## LR(1) items:
atom -> term . EQ term [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On EQ shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## term EQ
## LR(1) items:
atom -> term EQ . term [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On INTC shift to state 60
-- On IDENT shift to state 63
-- On FC shift to state 65
-- On term shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## term EQ term
## LR(1) items:
atom -> term EQ term . [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
## Reductions:
-- On RPAR OR IMP HYP GOAL EOF DEF AND
--   reduce production atom -> term EQ term

State 88:
## Known stack suffix:
## ALL LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR COMMA formule
## LR(1) items:
formule -> formule . AND formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> formule . OR formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> formule . IMP formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> ALL LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR COMMA formule . [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On OR shift to state 89
-- On IMP shift to state 94
-- On AND shift to state 91
## Reductions:
-- On RPAR OR IMP HYP GOAL EOF DEF AND
--   reduce production formule -> ALL LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR COMMA formule
** Conflict on OR IMP AND

State 89:
## Known stack suffix:
## formule OR
## LR(1) items:
formule -> formule OR . formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On TOP shift to state 56
-- On NOT shift to state 57
-- On LPAR shift to state 59
-- On INTC shift to state 60
-- On IDENT shift to state 61
-- On FC shift to state 65
-- On EXISTS shift to state 74
-- On BOTTOM shift to state 79
-- On ALL shift to state 80
-- On term shift to state 85
-- On formule shift to state 90
-- On atom shift to state 93
## Reductions:

State 90:
## Known stack suffix:
## formule OR formule
## LR(1) items:
formule -> formule . AND formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> formule . OR formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> formule OR formule . [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> formule . IMP formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On OR shift to state 89
-- On AND shift to state 91
## Reductions:
-- On RPAR IMP HYP GOAL EOF DEF
--   reduce production formule -> formule OR formule

State 91:
## Known stack suffix:
## formule AND
## LR(1) items:
formule -> formule AND . formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On TOP shift to state 56
-- On NOT shift to state 57
-- On LPAR shift to state 59
-- On INTC shift to state 60
-- On IDENT shift to state 61
-- On FC shift to state 65
-- On EXISTS shift to state 74
-- On BOTTOM shift to state 79
-- On ALL shift to state 80
-- On term shift to state 85
-- On formule shift to state 92
-- On atom shift to state 93
## Reductions:

State 92:
## Known stack suffix:
## formule AND formule
## LR(1) items:
formule -> formule . AND formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> formule AND formule . [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> formule . OR formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> formule . IMP formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On AND shift to state 91
## Reductions:
-- On RPAR OR IMP HYP GOAL EOF DEF
--   reduce production formule -> formule AND formule

State 93:
## Known stack suffix:
## atom
## LR(1) items:
formule -> atom . [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
## Reductions:
-- On RPAR OR IMP HYP GOAL EOF DEF AND
--   reduce production formule -> atom

State 94:
## Known stack suffix:
## formule IMP
## LR(1) items:
formule -> formule IMP . formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On TOP shift to state 56
-- On NOT shift to state 57
-- On LPAR shift to state 59
-- On INTC shift to state 60
-- On IDENT shift to state 61
-- On FC shift to state 65
-- On EXISTS shift to state 74
-- On BOTTOM shift to state 79
-- On ALL shift to state 80
-- On term shift to state 85
-- On formule shift to state 95
-- On atom shift to state 93
## Reductions:

State 95:
## Known stack suffix:
## formule IMP formule
## LR(1) items:
formule -> formule . AND formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> formule . OR formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> formule . IMP formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> formule IMP formule . [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On OR shift to state 89
-- On IMP shift to state 94
-- On AND shift to state 91
## Reductions:
-- On RPAR HYP GOAL EOF DEF
--   reduce production formule -> formule IMP formule

State 96:
## Known stack suffix:
## declaration_param
## LR(1) items:
separated_nonempty_list(COMMA,declaration_param) -> declaration_param . [ RPAR ]
separated_nonempty_list(COMMA,declaration_param) -> declaration_param . COMMA separated_nonempty_list(COMMA,declaration_param) [ RPAR ]
## Transitions:
-- On COMMA shift to state 97
## Reductions:
-- On RPAR
--   reduce production separated_nonempty_list(COMMA,declaration_param) -> declaration_param

State 97:
## Known stack suffix:
## declaration_param COMMA
## LR(1) items:
separated_nonempty_list(COMMA,declaration_param) -> declaration_param COMMA . separated_nonempty_list(COMMA,declaration_param) [ RPAR ]
## Transitions:
-- On IDENT shift to state 47
-- On separated_nonempty_list(COMMA,declaration_param) shift to state 98
-- On declaration_param shift to state 96
## Reductions:

State 98:
## Known stack suffix:
## declaration_param COMMA separated_nonempty_list(COMMA,declaration_param)
## LR(1) items:
separated_nonempty_list(COMMA,declaration_param) -> declaration_param COMMA separated_nonempty_list(COMMA,declaration_param) . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production separated_nonempty_list(COMMA,declaration_param) -> declaration_param COMMA separated_nonempty_list(COMMA,declaration_param)

State 99:
## Known stack suffix:
## EXISTS LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR COMMA formule
## LR(1) items:
formule -> formule . AND formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> formule . OR formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> formule . IMP formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> EXISTS LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR COMMA formule . [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On OR shift to state 89
-- On IMP shift to state 94
-- On AND shift to state 91
## Reductions:
-- On RPAR OR IMP HYP GOAL EOF DEF AND
--   reduce production formule -> EXISTS LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR COMMA formule
** Conflict on OR IMP AND

State 100:
## Known stack suffix:
## LPAR formule
## LR(1) items:
formule -> formule . AND formule [ RPAR OR IMP AND ]
formule -> formule . OR formule [ RPAR OR IMP AND ]
formule -> formule . IMP formule [ RPAR OR IMP AND ]
formule -> LPAR formule . RPAR OR LPAR formule RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> LPAR formule . RPAR AND LPAR formule RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> LPAR formule . RPAR IMP LPAR formule RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On RPAR shift to state 101
-- On OR shift to state 89
-- On IMP shift to state 94
-- On AND shift to state 91
## Reductions:

State 101:
## Known stack suffix:
## LPAR formule RPAR
## LR(1) items:
formule -> LPAR formule RPAR . OR LPAR formule RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> LPAR formule RPAR . AND LPAR formule RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> LPAR formule RPAR . IMP LPAR formule RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On OR shift to state 102
-- On IMP shift to state 106
-- On AND shift to state 110
## Reductions:

State 102:
## Known stack suffix:
## LPAR formule RPAR OR
## LR(1) items:
formule -> LPAR formule RPAR OR . LPAR formule RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On LPAR shift to state 103
## Reductions:

State 103:
## Known stack suffix:
## LPAR formule RPAR OR LPAR
## LR(1) items:
formule -> LPAR formule RPAR OR LPAR . formule RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On TOP shift to state 56
-- On NOT shift to state 57
-- On LPAR shift to state 59
-- On INTC shift to state 60
-- On IDENT shift to state 61
-- On FC shift to state 65
-- On EXISTS shift to state 74
-- On BOTTOM shift to state 79
-- On ALL shift to state 80
-- On term shift to state 85
-- On formule shift to state 104
-- On atom shift to state 93
## Reductions:

State 104:
## Known stack suffix:
## LPAR formule RPAR OR LPAR formule
## LR(1) items:
formule -> formule . AND formule [ RPAR OR IMP AND ]
formule -> formule . OR formule [ RPAR OR IMP AND ]
formule -> formule . IMP formule [ RPAR OR IMP AND ]
formule -> LPAR formule RPAR OR LPAR formule . RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On RPAR shift to state 105
-- On OR shift to state 89
-- On IMP shift to state 94
-- On AND shift to state 91
## Reductions:

State 105:
## Known stack suffix:
## LPAR formule RPAR OR LPAR formule RPAR
## LR(1) items:
formule -> LPAR formule RPAR OR LPAR formule RPAR . [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
## Reductions:
-- On RPAR OR IMP HYP GOAL EOF DEF AND
--   reduce production formule -> LPAR formule RPAR OR LPAR formule RPAR

State 106:
## Known stack suffix:
## LPAR formule RPAR IMP
## LR(1) items:
formule -> LPAR formule RPAR IMP . LPAR formule RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On LPAR shift to state 107
## Reductions:

State 107:
## Known stack suffix:
## LPAR formule RPAR IMP LPAR
## LR(1) items:
formule -> LPAR formule RPAR IMP LPAR . formule RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On TOP shift to state 56
-- On NOT shift to state 57
-- On LPAR shift to state 59
-- On INTC shift to state 60
-- On IDENT shift to state 61
-- On FC shift to state 65
-- On EXISTS shift to state 74
-- On BOTTOM shift to state 79
-- On ALL shift to state 80
-- On term shift to state 85
-- On formule shift to state 108
-- On atom shift to state 93
## Reductions:

State 108:
## Known stack suffix:
## LPAR formule RPAR IMP LPAR formule
## LR(1) items:
formule -> formule . AND formule [ RPAR OR IMP AND ]
formule -> formule . OR formule [ RPAR OR IMP AND ]
formule -> formule . IMP formule [ RPAR OR IMP AND ]
formule -> LPAR formule RPAR IMP LPAR formule . RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On RPAR shift to state 109
-- On OR shift to state 89
-- On IMP shift to state 94
-- On AND shift to state 91
## Reductions:

State 109:
## Known stack suffix:
## LPAR formule RPAR IMP LPAR formule RPAR
## LR(1) items:
formule -> LPAR formule RPAR IMP LPAR formule RPAR . [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
## Reductions:
-- On RPAR OR IMP HYP GOAL EOF DEF AND
--   reduce production formule -> LPAR formule RPAR IMP LPAR formule RPAR

State 110:
## Known stack suffix:
## LPAR formule RPAR AND
## LR(1) items:
formule -> LPAR formule RPAR AND . LPAR formule RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On LPAR shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## LPAR formule RPAR AND LPAR
## LR(1) items:
formule -> LPAR formule RPAR AND LPAR . formule RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On TOP shift to state 56
-- On NOT shift to state 57
-- On LPAR shift to state 59
-- On INTC shift to state 60
-- On IDENT shift to state 61
-- On FC shift to state 65
-- On EXISTS shift to state 74
-- On BOTTOM shift to state 79
-- On ALL shift to state 80
-- On term shift to state 85
-- On formule shift to state 112
-- On atom shift to state 93
## Reductions:

State 112:
## Known stack suffix:
## LPAR formule RPAR AND LPAR formule
## LR(1) items:
formule -> formule . AND formule [ RPAR OR IMP AND ]
formule -> formule . OR formule [ RPAR OR IMP AND ]
formule -> formule . IMP formule [ RPAR OR IMP AND ]
formule -> LPAR formule RPAR AND LPAR formule . RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On RPAR shift to state 113
-- On OR shift to state 89
-- On IMP shift to state 94
-- On AND shift to state 91
## Reductions:

State 113:
## Known stack suffix:
## LPAR formule RPAR AND LPAR formule RPAR
## LR(1) items:
formule -> LPAR formule RPAR AND LPAR formule RPAR . [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
## Reductions:
-- On RPAR OR IMP HYP GOAL EOF DEF AND
--   reduce production formule -> LPAR formule RPAR AND LPAR formule RPAR

State 114:
## Known stack suffix:
## LPAR atom
## LR(1) items:
formule -> atom . [ RPAR OR IMP AND ]
formule -> LPAR atom . RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On RPAR shift to state 115
## Reductions:
-- On RPAR OR IMP AND
--   reduce production formule -> atom
** Conflict on RPAR

State 115:
## Known stack suffix:
## LPAR atom RPAR
## LR(1) items:
formule -> LPAR atom RPAR . [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
## Reductions:
-- On RPAR OR IMP HYP GOAL EOF DEF AND
--   reduce production formule -> LPAR atom RPAR

State 116:
## Known stack suffix:
## NOT LPAR formule
## LR(1) items:
formule -> formule . AND formule [ RPAR OR IMP AND ]
formule -> formule . OR formule [ RPAR OR IMP AND ]
formule -> formule . IMP formule [ RPAR OR IMP AND ]
formule -> LPAR formule . RPAR OR LPAR formule RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> LPAR formule . RPAR AND LPAR formule RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> LPAR formule . RPAR IMP LPAR formule RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> NOT LPAR formule . RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On RPAR shift to state 117
-- On OR shift to state 89
-- On IMP shift to state 94
-- On AND shift to state 91
## Reductions:

State 117:
## Known stack suffix:
## NOT LPAR formule RPAR
## LR(1) items:
formule -> LPAR formule RPAR . OR LPAR formule RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> LPAR formule RPAR . AND LPAR formule RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> LPAR formule RPAR . IMP LPAR formule RPAR [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> NOT LPAR formule RPAR . [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
-- On OR shift to state 102
-- On IMP shift to state 106
-- On AND shift to state 110
## Reductions:
-- On RPAR OR IMP HYP GOAL EOF DEF AND
--   reduce production formule -> NOT LPAR formule RPAR
** Conflict on OR IMP AND

State 118:
## Known stack suffix:
## NOT formule
## LR(1) items:
formule -> formule . AND formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> formule . OR formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> formule . IMP formule [ RPAR OR IMP HYP GOAL EOF DEF AND ]
formule -> NOT formule . [ RPAR OR IMP HYP GOAL EOF DEF AND ]
## Transitions:
## Reductions:
-- On RPAR OR IMP HYP GOAL EOF DEF AND
--   reduce production formule -> NOT formule

State 119:
## Known stack suffix:
## DEF IDENT LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR COLON PROP DPEC formule
## LR(1) items:
define_form -> DEF IDENT LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR COLON PROP DPEC formule . [ HYP GOAL DEF ]
formule -> formule . AND formule [ OR IMP HYP GOAL DEF AND ]
formule -> formule . OR formule [ OR IMP HYP GOAL DEF AND ]
formule -> formule . IMP formule [ OR IMP HYP GOAL DEF AND ]
## Transitions:
-- On OR shift to state 89
-- On IMP shift to state 94
-- On AND shift to state 91
## Reductions:
-- On HYP GOAL DEF
--   reduce production define_form -> DEF IDENT LPAR loption(separated_nonempty_list(COMMA,declaration_param)) RPAR COLON PROP DPEC formule

State 120:
## Known stack suffix:
## declaration_sigma list(define_form)
## LR(1) items:
program -> declaration_sigma list(define_form) . list(hypotheses) goal EOF [ # ]
## Transitions:
-- On HYP shift to state 121
-- On list(hypotheses) shift to state 125
-- On hypotheses shift to state 132
## Reductions:
-- On GOAL
--   reduce production list(hypotheses) ->

State 121:
## Known stack suffix:
## HYP
## LR(1) items:
hypotheses -> HYP . IDENT COLON formule [ HYP GOAL ]
## Transitions:
-- On IDENT shift to state 122
## Reductions:

State 122:
## Known stack suffix:
## HYP IDENT
## LR(1) items:
hypotheses -> HYP IDENT . COLON formule [ HYP GOAL ]
## Transitions:
-- On COLON shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## HYP IDENT COLON
## LR(1) items:
hypotheses -> HYP IDENT COLON . formule [ HYP GOAL ]
## Transitions:
-- On TOP shift to state 56
-- On NOT shift to state 57
-- On LPAR shift to state 59
-- On INTC shift to state 60
-- On IDENT shift to state 61
-- On FC shift to state 65
-- On EXISTS shift to state 74
-- On BOTTOM shift to state 79
-- On ALL shift to state 80
-- On term shift to state 85
-- On formule shift to state 124
-- On atom shift to state 93
## Reductions:

State 124:
## Known stack suffix:
## HYP IDENT COLON formule
## LR(1) items:
formule -> formule . AND formule [ OR IMP HYP GOAL AND ]
formule -> formule . OR formule [ OR IMP HYP GOAL AND ]
formule -> formule . IMP formule [ OR IMP HYP GOAL AND ]
hypotheses -> HYP IDENT COLON formule . [ HYP GOAL ]
## Transitions:
-- On OR shift to state 89
-- On IMP shift to state 94
-- On AND shift to state 91
## Reductions:
-- On HYP GOAL
--   reduce production hypotheses -> HYP IDENT COLON formule

State 125:
## Known stack suffix:
## declaration_sigma list(define_form) list(hypotheses)
## LR(1) items:
program -> declaration_sigma list(define_form) list(hypotheses) . goal EOF [ # ]
## Transitions:
-- On GOAL shift to state 126
-- On goal shift to state 130
## Reductions:

State 126:
## Known stack suffix:
## GOAL
## LR(1) items:
goal -> GOAL . IDENT COLON formule [ EOF ]
## Transitions:
-- On IDENT shift to state 127
## Reductions:

State 127:
## Known stack suffix:
## GOAL IDENT
## LR(1) items:
goal -> GOAL IDENT . COLON formule [ EOF ]
## Transitions:
-- On COLON shift to state 128
## Reductions:

State 128:
## Known stack suffix:
## GOAL IDENT COLON
## LR(1) items:
goal -> GOAL IDENT COLON . formule [ EOF ]
## Transitions:
-- On TOP shift to state 56
-- On NOT shift to state 57
-- On LPAR shift to state 59
-- On INTC shift to state 60
-- On IDENT shift to state 61
-- On FC shift to state 65
-- On EXISTS shift to state 74
-- On BOTTOM shift to state 79
-- On ALL shift to state 80
-- On term shift to state 85
-- On formule shift to state 129
-- On atom shift to state 93
## Reductions:

State 129:
## Known stack suffix:
## GOAL IDENT COLON formule
## LR(1) items:
formule -> formule . AND formule [ OR IMP EOF AND ]
formule -> formule . OR formule [ OR IMP EOF AND ]
formule -> formule . IMP formule [ OR IMP EOF AND ]
goal -> GOAL IDENT COLON formule . [ EOF ]
## Transitions:
-- On OR shift to state 89
-- On IMP shift to state 94
-- On AND shift to state 91
## Reductions:
-- On EOF
--   reduce production goal -> GOAL IDENT COLON formule

State 130:
## Known stack suffix:
## declaration_sigma list(define_form) list(hypotheses) goal
## LR(1) items:
program -> declaration_sigma list(define_form) list(hypotheses) goal . EOF [ # ]
## Transitions:
-- On EOF shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## declaration_sigma list(define_form) list(hypotheses) goal EOF
## LR(1) items:
program -> declaration_sigma list(define_form) list(hypotheses) goal EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production program -> declaration_sigma list(define_form) list(hypotheses) goal EOF

State 132:
## Known stack suffix:
## hypotheses
## LR(1) items:
list(hypotheses) -> hypotheses . list(hypotheses) [ GOAL ]
## Transitions:
-- On HYP shift to state 121
-- On list(hypotheses) shift to state 133
-- On hypotheses shift to state 132
## Reductions:
-- On GOAL
--   reduce production list(hypotheses) ->

State 133:
## Known stack suffix:
## hypotheses list(hypotheses)
## LR(1) items:
list(hypotheses) -> hypotheses list(hypotheses) . [ GOAL ]
## Transitions:
## Reductions:
-- On GOAL
--   reduce production list(hypotheses) -> hypotheses list(hypotheses)

State 134:
## Known stack suffix:
## define_form
## LR(1) items:
list(define_form) -> define_form . list(define_form) [ HYP GOAL ]
## Transitions:
-- On DEF shift to state 44
-- On list(define_form) shift to state 135
-- On define_form shift to state 134
## Reductions:
-- On HYP GOAL
--   reduce production list(define_form) ->

State 135:
## Known stack suffix:
## define_form list(define_form)
## LR(1) items:
list(define_form) -> define_form list(define_form) . [ HYP GOAL ]
## Transitions:
## Reductions:
-- On HYP GOAL
--   reduce production list(define_form) -> define_form list(define_form)

